{"version":3,"sources":["components/test.js","components/font.js","App.js","serviceWorker.js","index.js"],"names":["ThreeScene","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hundleClick","scene","remove","mesh","geometry2","THREE","i","rad","Math","random","PI","z","k","sqrt","vertices","push","cos","sin","color","colors","material2","size","vertexColors","mesh2","add","renderScene","clickAnimation","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","scale","x","y","rotation","window","renderer","render","camera","resize","w","mount","clientWidth","h","clientHeight","aspect","updateProjectionMatrix","setSize","state","width","height","position","antialias","setClearColor","appendChild","domElement","geometry","material","light","set","addEventListener","removeChild","_this2","react_default","a","createElement","style","ref","onClick","Component","App","className","test","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a680ba4d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\n\r\n\r\nclass ThreeScene extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n\r\n  }\r\n  componentDidMount() {\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    //ADD SCENE\r\n    this.scene = new THREE.Scene()\r\n    //ADD CAMERA\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      45,\r\n      width / height,\r\n      0.1,\r\n      3000\r\n    )\r\n\r\n    this.camera.position.z = 2000\r\n    //ADD RENDERER\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    this.renderer.setClearColor('#ffffff')\r\n    this.renderer.setSize(width, height)\r\n    this.mount.appendChild(this.renderer.domElement)\r\n    this.geometry = new THREE.Geometry();\r\n\r\n    const SIZE = 30;\r\n    // 配置する個数\r\n    const LENGTH = 60000;\r\n    for (let i = 0; i < LENGTH; i++) {\r\n      const rad = Math.random() * Math.PI * 2\r\n      const z = (Math.random() * 2) - 1\r\n      const k = Math.sqrt(1 - z * z)\r\n      this.geometry.vertices.push(new THREE.Vector3(\r\n        SIZE * k * Math.cos(rad),\r\n        SIZE * k * Math.sin(rad),\r\n        SIZE * z,\r\n      ));\r\n      let color = new THREE.Color(\"rgb(256, \" + (~~(256 * Math.random())) + \", \" + (~~(256 * Math.random())) + \")\");\r\n      this.geometry.colors.push(color)\r\n    }\r\n\r\n    this.material = new THREE.PointsMaterial({\r\n      // 一つ一つのサイズ\r\n      size: 5,\r\n      // 色\r\n      color: 0xFFFFFF,\r\n      vertexColors: true\r\n    });\r\n\r\n    this.mesh = new THREE.Points(this.geometry, this.material);\r\n    this.scene.add(this.mesh);\r\n\r\n    const light = new THREE.DirectionalLight(0xffffff, 1)\r\n    light.position.set(1, 0, 1)\r\n    this.scene.add(light)\r\n    this.start()\r\n    window.addEventListener(\"resize\", this.resize)\r\n  }\r\n\r\n  hundleClick = () => {\r\n    this.scene.remove(this.mesh);\r\n    this.geometry2 = new THREE.Geometry();\r\n    for (let i = 0; i < 30000; i++) {\r\n      const rad = Math.random() * Math.PI * 2\r\n      const z = (Math.random() * 2) - 1\r\n      const k = Math.sqrt(1 - z * z)\r\n      this.geometry2.vertices.push(new THREE.Vector3(\r\n        100 * k * Math.cos(rad),\r\n        100 * k * Math.sin(rad),\r\n        100 * z,\r\n      ));\r\n\r\n      let color = new THREE.Color(\"rgb(256, \" + (~~(256 * Math.random())) + \", \" + (~~(256 * Math.random())) + \")\");\r\n      this.geometry2.colors.push(color)\r\n    }\r\n    this.material2 = new THREE.PointsMaterial({\r\n      // 一つ一つのサイズ\r\n      size: 5,\r\n      // 色\r\n      color: 0xFFFFFF,\r\n      vertexColors: true\r\n    });\r\n    this.mesh2 = new THREE.Points(this.geometry2, this.material2);\r\n    this.scene.add(this.mesh2);\r\n    this.renderScene()\r\n  }\r\n  clickAnimation = () => {\r\n  }\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate = () => {\r\n    if (this.mesh.scale.x < 15) {\r\n      this.mesh.scale.x += 0.1;\r\n      this.mesh.scale.y += 0.1;\r\n      this.mesh.scale.z += 0.1;\r\n      this.mesh.rotation.x += 0.01;\r\n      this.mesh.rotation.y += 0.01;\r\n      this.mesh.rotation.z += 0.01;\r\n    } else {\r\n      this.mesh.rotation.x += 0.01;\r\n      this.mesh.rotation.y += 0.01;\r\n      this.mesh.rotation.z += 0.01;\r\n    }\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n  }\r\n\r\n  renderScene = () => {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  resize = () => {\r\n    const w = this.mount.clientWidth\r\n    const h = this.mount.clientHeight\r\n    this.camera.aspect = w / h\r\n    this.camera.updateProjectionMatrix()\r\n    this.renderer.setSize(w, h)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ height: '100vh' }}\r\n        ref={(mount) => { this.mount = mount }}\r\n        onClick={this.hundleClick}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default ThreeScene\r\n","import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\nimport fontJson from \"three/examples/fonts/helvetiker_regular.typeface.json\"\r\nexport default class FontScene extends Component {\r\n  componentDidMount() {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer();\r\n    const axis = new THREE.AxesHelper(1000);\r\n    const light = new THREE.DirectionalLight(0xb4e7f2, 1.5);\r\n    light.position.set(1, 1, 1);\r\n    light.target.position.set(0, 0, 0);\r\n    scene.add(axis);\r\n    scene.add(light);\r\n    scene.add(light.target);\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.container.appendChild(renderer.domElement);\r\n    camera.position.set(50, 50, 200);\r\n    const font = new THREE.FontLoader().parse(fontJson);\r\n    console.log(font)\r\n\r\n    const textGeometry = new THREE.TextGeometry(\"hello\", {\r\n      font: font,\r\n      size: 30,\r\n      height: 5,\r\n      curveSegments: 32\r\n    });\r\n    for (let i = 0; i < 100; i++) {\r\n      const rad = Math.random() * Math.PI * 2\r\n      const z = (Math.random() * 2) - 1\r\n      const k = Math.sqrt(1 - z * z)\r\n      textGeometry.vertices.push(new THREE.Vector3(\r\n        10 * k * Math.cos(rad),\r\n        10 * k * Math.sin(rad),\r\n        10 * z,\r\n      ));\r\n\r\n      let color = new THREE.Color(\"rgb(256, \" + (~~(256 * Math.random())) + \", \" + (~~(256 * Math.random())) + \")\");\r\n      textGeometry.colors.push(color)\r\n    }\r\n    const material = new THREE.PointsMaterial({\r\n      // 一つ一つのサイズ\r\n      size: 1,\r\n      // 色\r\n      color: 0xFFFFFF,\r\n      vertexColors: true\r\n    });\r\n    const textMesh = new THREE.Mesh(textGeometry, material);\r\n    scene.add(textMesh);\r\n    const render = () => {\r\n      requestAnimationFrame(render);\r\n      renderer.setClearColor(0xaabbcc, 1.0);\r\n      renderer.render(scene, camera);\r\n    };\r\n    render();\r\n  }\r\n  render() {\r\n    return (\r\n      <div ref={container => this.container = container}></div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Canvas from './components/test.js'\nimport FontScene from './components/font'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas></Canvas>\n      {/* <FontScene></FontScene> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}